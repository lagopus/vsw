//
// Copyright 2017 Nippon Telegraph and Telephone Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: vrrp.proto

package rpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ResultCode int32

const (
	ResultCode_SUCCESS ResultCode = 0
	ResultCode_FAILURE ResultCode = 1
)

var ResultCode_name = map[int32]string{
	0: "SUCCESS",
	1: "FAILURE",
}

var ResultCode_value = map[string]int32{
	"SUCCESS": 0,
	"FAILURE": 1,
}

func (x ResultCode) String() string {
	return proto.EnumName(ResultCode_name, int32(x))
}

func (ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7ac7a087ddbeffa7, []int{0}
}

type Reply struct {
	Code                 ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=rpc.ResultCode" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Reply) Reset()         { *m = Reply{} }
func (m *Reply) String() string { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()    {}
func (*Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ac7a087ddbeffa7, []int{0}
}

func (m *Reply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Reply.Unmarshal(m, b)
}
func (m *Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Reply.Marshal(b, m, deterministic)
}
func (m *Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reply.Merge(m, src)
}
func (m *Reply) XXX_Size() int {
	return xxx_messageInfo_Reply.Size(m)
}
func (m *Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_Reply proto.InternalMessageInfo

func (m *Reply) GetCode() ResultCode {
	if m != nil {
		return m.Code
	}
	return ResultCode_SUCCESS
}

type VifEntry struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Phyaddr              string   `protobuf:"bytes,2,opt,name=phyaddr,proto3" json:"phyaddr,omitempty"`
	Vaddr                string   `protobuf:"bytes,3,opt,name=vaddr,proto3" json:"vaddr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VifEntry) Reset()         { *m = VifEntry{} }
func (m *VifEntry) String() string { return proto.CompactTextString(m) }
func (*VifEntry) ProtoMessage()    {}
func (*VifEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ac7a087ddbeffa7, []int{1}
}

func (m *VifEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VifEntry.Unmarshal(m, b)
}
func (m *VifEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VifEntry.Marshal(b, m, deterministic)
}
func (m *VifEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VifEntry.Merge(m, src)
}
func (m *VifEntry) XXX_Size() int {
	return xxx_messageInfo_VifEntry.Size(m)
}
func (m *VifEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_VifEntry.DiscardUnknown(m)
}

var xxx_messageInfo_VifEntry proto.InternalMessageInfo

func (m *VifEntry) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VifEntry) GetPhyaddr() string {
	if m != nil {
		return m.Phyaddr
	}
	return ""
}

func (m *VifEntry) GetVaddr() string {
	if m != nil {
		return m.Vaddr
	}
	return ""
}

type VifInfo struct {
	N                    uint64      `protobuf:"varint,1,opt,name=n,proto3" json:"n,omitempty"`
	Entries              []*VifEntry `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *VifInfo) Reset()         { *m = VifInfo{} }
func (m *VifInfo) String() string { return proto.CompactTextString(m) }
func (*VifInfo) ProtoMessage()    {}
func (*VifInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ac7a087ddbeffa7, []int{2}
}

func (m *VifInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VifInfo.Unmarshal(m, b)
}
func (m *VifInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VifInfo.Marshal(b, m, deterministic)
}
func (m *VifInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VifInfo.Merge(m, src)
}
func (m *VifInfo) XXX_Size() int {
	return xxx_messageInfo_VifInfo.Size(m)
}
func (m *VifInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VifInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VifInfo proto.InternalMessageInfo

func (m *VifInfo) GetN() uint64 {
	if m != nil {
		return m.N
	}
	return 0
}

func (m *VifInfo) GetEntries() []*VifEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func init() {
	proto.RegisterEnum("rpc.ResultCode", ResultCode_name, ResultCode_value)
	proto.RegisterType((*Reply)(nil), "rpc.Reply")
	proto.RegisterType((*VifEntry)(nil), "rpc.VifEntry")
	proto.RegisterType((*VifInfo)(nil), "rpc.VifInfo")
}

func init() { proto.RegisterFile("vrrp.proto", fileDescriptor_7ac7a087ddbeffa7) }

var fileDescriptor_7ac7a087ddbeffa7 = []byte{
	// 272 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0xcf, 0x4b, 0xfb, 0x40,
	0x10, 0xc5, 0xbb, 0x4d, 0xfa, 0x4d, 0xbf, 0x53, 0x7f, 0x94, 0xc1, 0x43, 0xf0, 0x54, 0x22, 0xd4,
	0x52, 0x24, 0x87, 0xf8, 0x0f, 0xa8, 0x21, 0x4a, 0x41, 0x3d, 0x6c, 0x6c, 0xee, 0x31, 0xd9, 0x60,
	0x30, 0xee, 0x2e, 0x93, 0x6d, 0x21, 0x57, 0xff, 0x72, 0xe9, 0xd6, 0x28, 0x7a, 0xf0, 0xb6, 0x9f,
	0x37, 0x6f, 0x67, 0x1e, 0x0f, 0x60, 0x4b, 0xa4, 0x43, 0x4d, 0xca, 0x28, 0x74, 0x48, 0x17, 0xc1,
	0x05, 0x8c, 0xb8, 0xd0, 0x4d, 0x87, 0x67, 0xe0, 0x16, 0xaa, 0x14, 0x3e, 0x9b, 0xb1, 0xc5, 0x51,
	0x74, 0x1c, 0x92, 0x2e, 0x42, 0x2e, 0xda, 0x4d, 0x63, 0x62, 0x55, 0x0a, 0x6e, 0x87, 0xc1, 0x23,
	0x8c, 0xb3, 0xba, 0x4a, 0xa4, 0xa1, 0x0e, 0x11, 0x5c, 0x99, 0xbf, 0xed, 0x3f, 0xfc, 0xe7, 0xf6,
	0x8d, 0x3e, 0x78, 0xfa, 0xa5, 0xcb, 0xcb, 0x92, 0xfc, 0xa1, 0x95, 0x7b, 0xc4, 0x13, 0x18, 0x6d,
	0xad, 0xee, 0x58, 0x7d, 0x0f, 0xc1, 0x15, 0x78, 0x59, 0x5d, 0xad, 0x64, 0xa5, 0xf0, 0x00, 0x98,
	0xb4, 0xbb, 0x5c, 0xce, 0x24, 0x9e, 0x83, 0x27, 0xa4, 0xa1, 0x5a, 0xb4, 0xfe, 0x70, 0xe6, 0x2c,
	0x26, 0xd1, 0xa1, 0x0d, 0xd4, 0x1f, 0xe7, 0xfd, 0x74, 0x39, 0x07, 0xf8, 0x4e, 0x89, 0x13, 0xf0,
	0xd2, 0x75, 0x1c, 0x27, 0x69, 0x3a, 0x1d, 0xec, 0xe0, 0xf6, 0x7a, 0x75, 0xbf, 0xe6, 0xc9, 0x94,
	0x45, 0xef, 0x0c, 0xdc, 0x8c, 0x48, 0xe3, 0x12, 0xe0, 0x4e, 0x98, 0xaf, 0xab, 0xfd, 0xda, 0x1d,
	0x9d, 0xfe, 0xa0, 0x60, 0x80, 0x73, 0x18, 0x3f, 0xa9, 0x87, 0xbc, 0x35, 0x82, 0x7e, 0x39, 0xe1,
	0xb3, 0x1f, 0xdd, 0x74, 0xbd, 0xef, 0x26, 0x2f, 0x5e, 0x37, 0xfa, 0x2f, 0xdf, 0xf3, 0x3f, 0x5b,
	0xfc, 0xe5, 0x47, 0x00, 0x00, 0x00, 0xff, 0xff, 0x32, 0x23, 0x19, 0x65, 0x86, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// VrrpClient is the client API for Vrrp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VrrpClient interface {
	GetVifInfo(ctx context.Context, in *VifInfo, opts ...grpc.CallOption) (*VifInfo, error)
	ToMaster(ctx context.Context, in *VifInfo, opts ...grpc.CallOption) (*Reply, error)
	ToBackup(ctx context.Context, in *VifInfo, opts ...grpc.CallOption) (*Reply, error)
}

type vrrpClient struct {
	cc *grpc.ClientConn
}

func NewVrrpClient(cc *grpc.ClientConn) VrrpClient {
	return &vrrpClient{cc}
}

func (c *vrrpClient) GetVifInfo(ctx context.Context, in *VifInfo, opts ...grpc.CallOption) (*VifInfo, error) {
	out := new(VifInfo)
	err := c.cc.Invoke(ctx, "/rpc.Vrrp/GetVifInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vrrpClient) ToMaster(ctx context.Context, in *VifInfo, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/rpc.Vrrp/ToMaster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vrrpClient) ToBackup(ctx context.Context, in *VifInfo, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/rpc.Vrrp/ToBackup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VrrpServer is the server API for Vrrp service.
type VrrpServer interface {
	GetVifInfo(context.Context, *VifInfo) (*VifInfo, error)
	ToMaster(context.Context, *VifInfo) (*Reply, error)
	ToBackup(context.Context, *VifInfo) (*Reply, error)
}

// UnimplementedVrrpServer can be embedded to have forward compatible implementations.
type UnimplementedVrrpServer struct {
}

func (*UnimplementedVrrpServer) GetVifInfo(ctx context.Context, req *VifInfo) (*VifInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVifInfo not implemented")
}
func (*UnimplementedVrrpServer) ToMaster(ctx context.Context, req *VifInfo) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToMaster not implemented")
}
func (*UnimplementedVrrpServer) ToBackup(ctx context.Context, req *VifInfo) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToBackup not implemented")
}

func RegisterVrrpServer(s *grpc.Server, srv VrrpServer) {
	s.RegisterService(&_Vrrp_serviceDesc, srv)
}

func _Vrrp_GetVifInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VifInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VrrpServer).GetVifInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Vrrp/GetVifInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VrrpServer).GetVifInfo(ctx, req.(*VifInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vrrp_ToMaster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VifInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VrrpServer).ToMaster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Vrrp/ToMaster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VrrpServer).ToMaster(ctx, req.(*VifInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vrrp_ToBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VifInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VrrpServer).ToBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Vrrp/ToBackup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VrrpServer).ToBackup(ctx, req.(*VifInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _Vrrp_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Vrrp",
	HandlerType: (*VrrpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVifInfo",
			Handler:    _Vrrp_GetVifInfo_Handler,
		},
		{
			MethodName: "ToMaster",
			Handler:    _Vrrp_ToMaster_Handler,
		},
		{
			MethodName: "ToBackup",
			Handler:    _Vrrp_ToBackup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vrrp.proto",
}
